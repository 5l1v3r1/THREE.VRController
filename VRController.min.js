function OrientationArmModel(){this.isLeftHanded=!1,this.controllerQ=new THREE.Quaternion,this.lastControllerQ=new THREE.Quaternion,this.headQ=new THREE.Quaternion,this.headPos=new THREE.Vector3,this.elbowPos=new THREE.Vector3,this.wristPos=new THREE.Vector3,this.time=null,this.lastTime=null,this.rootQ=new THREE.Quaternion,this.pose={orientation:new THREE.Quaternion,position:new THREE.Vector3}}THREE.VRController=function(t){var e,o,n="",r=[],i=[];THREE.Object3D.call(this),this.matrixAutoUpdate=!1,this.standingMatrix=new THREE.Matrix4,this.head={position:new THREE.Vector3,quaternion:new THREE.Quaternion},this.gamepad=t,this.name=t.id,this.dof=3*(+t.pose.hasOrientation+ +t.pose.hasPosition),n=t.hand,r.byName={},t.axes.forEach(function(t,e){r[e]=t}),i.byName={},t.buttons.forEach(function(t,e){i[e]={name:"button_"+e,value:t.value,isTouched:t.touched,isPressed:t.pressed,isPrimary:!1}}),void 0!==(e=Object.elements(THREE.VRController.supported).find(function(e){if(t.id.startsWith(e))return!0}))&&(this.style=e.style,void 0!==e.axes&&e.axes.forEach(function(t){r.byName[t.name]=t.indexes}),void 0!==e.buttons&&e.buttons.forEach(function(t,e){i[e].name=t}),o=e.primary),i.forEach(function(t){i.byName[t.name]=t}),void 0===o&&(o=t.buttons.length>1?"button_1":"button_0"),i.byName[o].isPrimary=!0,this.getHandedness=function(){return n},this.getAxis=function(t){return r[t]},this.getAxes=function(t){var e=[];return void 0===t?r:"string"==typeof t?(r.byName[t].forEach(function(t){e.push(r[t])}),e):"number"==typeof t?r[t]:void 0},this.getButton=function(t){return"string"==typeof t?("primary"===t&&(t=o),i.byName[t]):"number"==typeof t?i[t]:void 0},this.report=function(){return"#"+t.index+": "+t.id+"\n\tStyle: "+this.style+"\n\tDOF: "+this.dof+"\n\tHandedness: "+n+"\n\tAxes: "+r.reduce(function(t,e,o){return t+e+(o<r.length-1?", ":"")},"")+"\n\tButtons:"+i.reduce(function(t,e){return t+"\n\t\tName: "+e.name+"\n\t\t\tValue:     "+e.value+"\n\t\t\tisTouched: "+e.isTouched+"\n\t\t\tisPressed: "+e.isPressed+"\n\t\t\tisPrimary: "+e.isPrimary},"")+"\n\tPrimary button: "+o},this.pollForChanges=function(){var e=THREE.VRController.verbosity,o=this,a="> #"+o.gamepad.index+" "+o.gamepad.id+" (Handedness: "+n+") ",s=Object.keys(r.byName),l=!1;n!==o.gamepad.hand&&(e>=.4&&console.log(a+'hand changed from "'+n+'" to "'+o.gamepad.hand+'"'),n=o.gamepad.hand,o.dispatchEvent({type:"hand changed",hand:n})),s.length>0?s.forEach(function(n){var i=[];l=!1,r.byName[n].forEach(function(e){t.axes[e]!==r[e]&&(l=!0,r[e]=t.axes[e]),i.push(r[e])}),l&&("vive"===o.style&&"thumbpad"===n&&(i[1]*=-1),e>=.7&&console.log(a+n+" axes changed",i),o.dispatchEvent({type:n+" axes changed",axes:i}))}):(t.axes.forEach(function(t,e){t!==r[e]&&(l=!0,r[e]=t)}),l&&(e>=.7&&console.log(a+"axes changed",r),o.dispatchEvent({type:"axes changed",axes:r}))),i.forEach(function(n,r){var i,s=a+n.name+" ",l=n.isPrimary;n.value!==t.buttons[r].value&&(n.value=t.buttons[r].value,e>=.6&&console.log(s+"value changed",n.value),o.dispatchEvent({type:n.name+" value changed",value:n.value}),l&&o.dispatchEvent({type:"primary value changed",value:n.value})),n.isTouched!==t.buttons[r].touched&&(n.isTouched=t.buttons[r].touched,i=n.isTouched?"began":"ended",e>=.5&&console.log(s+"touch "+i),o.dispatchEvent({type:n.name+" touch "+i}),l&&o.dispatchEvent({type:"primary touch "+i})),n.isPressed!==t.buttons[r].pressed&&(n.isPressed=t.buttons[r].pressed,i=n.isPressed?"began":"ended",e>=.5&&console.log(s+"press "+i),o.dispatchEvent({type:n.name+" press "+i}),l&&o.dispatchEvent({type:"primary press "+i}))})}},THREE.VRController.prototype=Object.create(THREE.Object3D.prototype),THREE.VRController.prototype.constructor=THREE.VRController,THREE.VRController.prototype.update=function(){var t=this.gamepad,e=t.pose;null!==e.orientation&&this.quaternion.fromArray(e.orientation),null!==e.position?(this.position.fromArray(e.position),this.matrix.compose(this.position,this.quaternion,this.scale)):(void 0===this.armModel&&(THREE.VRController.verbosity>=.5&&console.log("> #"+t.index+" "+t.id+" (Handedness: "+this.getHandedness()+") adding OrientationArmModel"),this.armModel=new OrientationArmModel),this.armModel.setHeadPosition(this.head.position),this.armModel.setHeadOrientation(this.head.quaternion),this.armModel.setControllerOrientation((new THREE.Quaternion).fromArray(e.orientation)),this.armModel.update(),this.matrix.compose(this.armModel.getPose().position,this.armModel.getPose().orientation,this.scale)),this.matrix.multiplyMatrices(this.standingMatrix,this.matrix),this.matrixWorldNeedsUpdate=!0,this.pollForChanges(),"function"==typeof this.updateCallback&&this.updateCallback()},THREE.VRController.verbosity=0,THREE.VRController.controllers=[],THREE.VRController.onGamepadConnect=function(t){var e=THREE.VRController,o=new e(t),n=o.gamepad.hapticActuators;e.controllers[t.index]=o,n&&n[0]&&n[0].pulse(.1,300),e.verbosity>=.5&&console.log("vr controller connected",o),e.verbosity>=.7&&console.log(o.report()),window.setTimeout(function(){window.dispatchEvent(new CustomEvent("vr controller connected",{detail:o}))},500)},THREE.VRController.onGamepadDisconnect=function(t){var e=THREE.VRController,o=e.controllers[t.index];e.verbosity>=.5&&console.log("vr controller disconnected",o),o.dispatchEvent({type:"disconnected",controller:o}),e.controllers[t.index]=void 0},THREE.VRController.update=function(){var t,e,o;if(void 0!==navigator.getGamepads)for(t=navigator.getGamepads(),o=0;o<t.length;o++)void 0!==(e=t[o])&&null!==e&&void 0!==e.pose&&null!==e.pose&&(null!==e.pose.orientation||null!==e.pose.position?(void 0===this.controllers[o]&&THREE.VRController.onGamepadConnect(e),this.controllers[o].update()):void 0!==this.controllers[o]&&THREE.VRController.onGamepadDisconnect(e))},THREE.VRController.report=function(){THREE.VRController.controllers.forEach(function(t){console.log("\n"+t.report())})},THREE.VRController.supported={"Daydream Controller":{style:"daydream",axes:[{name:"thumbpad",indexes:[0,1]}],buttons:["thumbpad"],primary:"thumbpad"},"OpenVR Gamepad":{style:"vive",axes:[{name:"thumbpad",indexes:[0,1]}],buttons:["thumbpad","trigger","grips","menu"],primary:"trigger"},"Oculus Touch (Right)":{style:"oculus",axes:[{name:"thumbstick",indexes:[0,1]}],buttons:["thumbstick","trigger","grip","A","B","thumbrest"],primary:"trigger"},"Oculus Touch (Left)":{style:"oculus",axes:[{name:"thumbstick",indexes:[0,1]}],buttons:["thumbstick","trigger","grip","X","Y","thumbrest"],primary:"trigger"},"Spatial Controller (Spatial Interaction Source)":{style:"microsoft",axes:[{name:"thumbstick",indexes:[0,1]},{name:"thumbpad",indexes:[2,3]}],buttons:["thumbstick","trigger","grip","menu","thumbpad"],primary:"trigger"}},Object.assign(OrientationArmModel,{HEAD_ELBOW_OFFSET:new THREE.Vector3(.155,-.465,-.15),ELBOW_WRIST_OFFSET:new THREE.Vector3(0,0,-.25),WRIST_CONTROLLER_OFFSET:new THREE.Vector3(0,0,.05),ARM_EXTENSION_OFFSET:new THREE.Vector3(-.08,.14,.08),ELBOW_BEND_RATIO:.4,EXTENSION_RATIO_WEIGHT:.4,MIN_ANGULAR_SPEED:.61}),OrientationArmModel.prototype.setControllerOrientation=function(t){this.lastControllerQ.copy(this.controllerQ),this.controllerQ.copy(t)},OrientationArmModel.prototype.setHeadOrientation=function(t){this.headQ.copy(t)},OrientationArmModel.prototype.setHeadPosition=function(t){this.headPos.copy(t)},OrientationArmModel.prototype.setLeftHanded=function(t){this.isLeftHanded=t},OrientationArmModel.prototype.update=function(){this.time=performance.now();var t=this.getHeadYawOrientation_(),e=(this.time-this.lastTime)/1e3,o=this.quatAngle_(this.lastControllerQ,this.controllerQ);o/e>OrientationArmModel.MIN_ANGULAR_SPEED?this.rootQ.slerp(t,o/10):this.rootQ.copy(t);var n=(new THREE.Euler).setFromQuaternion(this.controllerQ,"YXZ"),r=THREE.Math.radToDeg(n.x),i=this.clamp_((r-11)/39,0,1),a=this.rootQ.clone().inverse();a.multiply(this.controllerQ);var s=this.elbowPos;s.copy(this.headPos).add(OrientationArmModel.HEAD_ELBOW_OFFSET);var l=(new THREE.Vector3).copy(OrientationArmModel.ARM_EXTENSION_OFFSET);l.multiplyScalar(i),s.add(l);var d=this.quatAngle_(a,new THREE.Quaternion),c=THREE.Math.radToDeg(d),u=(1-Math.pow(c/180,4))*(OrientationArmModel.ELBOW_BEND_RATIO+(1-OrientationArmModel.ELBOW_BEND_RATIO)*i*OrientationArmModel.EXTENSION_RATIO_WEIGHT),h=(new THREE.Quaternion).slerp(a,u),p=h.inverse(),E=a.clone().multiply(p),m=this.wristPos;m.copy(OrientationArmModel.WRIST_CONTROLLER_OFFSET),m.applyQuaternion(h),m.add(OrientationArmModel.ELBOW_WRIST_OFFSET),m.applyQuaternion(E),m.add(this.elbowPos);var y=(new THREE.Vector3).copy(OrientationArmModel.ARM_EXTENSION_OFFSET);y.multiplyScalar(i);var T=(new THREE.Vector3).copy(this.wristPos);T.add(y),T.applyQuaternion(this.rootQ);var R=(new THREE.Quaternion).copy(this.controllerQ);this.pose.orientation.copy(R),this.pose.position.copy(T),this.lastTime=this.time},OrientationArmModel.prototype.getPose=function(){return this.pose},OrientationArmModel.prototype.getForearmLength=function(){return OrientationArmModel.ELBOW_WRIST_OFFSET.length()},OrientationArmModel.prototype.getElbowPosition=function(){return this.elbowPos.clone().applyQuaternion(this.rootQ)},OrientationArmModel.prototype.getWristPosition=function(){return this.wristPos.clone().applyQuaternion(this.rootQ)},OrientationArmModel.prototype.getHeadYawOrientation_=function(){var t=(new THREE.Euler).setFromQuaternion(this.headQ,"YXZ");return t.x=0,t.z=0,(new THREE.Quaternion).setFromEuler(t)},OrientationArmModel.prototype.clamp_=function(t,e,o){return Math.min(Math.max(t,e),o)},OrientationArmModel.prototype.quatAngle_=function(t,e){var o=new THREE.Vector3(0,0,-1),n=new THREE.Vector3(0,0,-1);return o.applyQuaternion(t),n.applyQuaternion(e),o.angleTo(n)};